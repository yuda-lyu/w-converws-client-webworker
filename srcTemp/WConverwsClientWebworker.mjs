import genID from 'wsemi/src/genID.mjs'
import genPm from 'wsemi/src/genPm.mjs'
import Evem from 'wsemi/src/evem.mjs'
import isfun from 'wsemi/src/isfun.mjs'
//import b642u8arr from 'wsemi/src/b642u8arr.mjs'
import b642str from 'wsemi/src/b642str.mjs'


//codeB64, 此處需提供worker執行程式碼, 因有特殊符號編譯困難, 故需先轉base64再使用
let codeB64 = 'IWZ1bmN0aW9uKGUsdCl7Im9iamVjdCI9PXR5cGVvZiBleHBvcnRzJiYidW5kZWZpbmVkIiE9dHlwZW9mIG1vZHVsZT90KCk6ImZ1bmN0aW9uIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUodCk6dCgpfSgwLGZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt2YXIgdD10aGlzLmNvbnN0cnVjdG9yO3JldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24obil7cmV0dXJuIHQucmVzb2x2ZShlKCkpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gbn0pfSxmdW5jdGlvbihuKXtyZXR1cm4gdC5yZXNvbHZlKGUoKSkudGhlbihmdW5jdGlvbigpe3JldHVybiB0LnJlamVjdChuKX0pfSl9ZnVuY3Rpb24gdChlKXtyZXR1cm4gbmV3IHRoaXMoZnVuY3Rpb24odCxuKXtmdW5jdGlvbiBvKGUsbil7aWYobiYmKCJvYmplY3QiPT10eXBlb2Ygbnx8ImZ1bmN0aW9uIj09dHlwZW9mIG4pKXt2YXIgZj1uLnRoZW47aWYoImZ1bmN0aW9uIj09dHlwZW9mIGYpcmV0dXJuIHZvaWQgZi5jYWxsKG4sZnVuY3Rpb24odCl7byhlLHQpfSxmdW5jdGlvbihuKXtyW2VdPXtzdGF0dXM6InJlamVjdGVkIixyZWFzb246bn0sMD09LS1pJiZ0KHIpfSl9cltlXT17c3RhdHVzOiJmdWxmaWxsZWQiLHZhbHVlOm59LDA9PS0taSYmdChyKX1pZighZXx8InVuZGVmaW5lZCI9PXR5cGVvZiBlLmxlbmd0aClyZXR1cm4gbihuZXcgVHlwZUVycm9yKHR5cGVvZiBlKyIgIitlKyIgaXMgbm90IGl0ZXJhYmxlKGNhbm5vdCByZWFkIHByb3BlcnR5IFN5bWJvbChTeW1ib2wuaXRlcmF0b3IpKSIpKTt2YXIgcj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChlKTtpZigwPT09ci5sZW5ndGgpcmV0dXJuIHQoW10pO2Zvcih2YXIgaT1yLmxlbmd0aCxmPTA7ci5sZW5ndGg+ZjtmKyspbyhmLHJbZl0pfSl9ZnVuY3Rpb24gbihlKXtyZXR1cm4hKCFlfHwidW5kZWZpbmVkIj09dHlwZW9mIGUubGVuZ3RoKX1mdW5jdGlvbiBvKCl7fWZ1bmN0aW9uIHIoZSl7aWYoISh0aGlzIGluc3RhbmNlb2YgcikpdGhyb3cgbmV3IFR5cGVFcnJvcigiUHJvbWlzZXMgbXVzdCBiZSBjb25zdHJ1Y3RlZCB2aWEgbmV3Iik7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcigibm90IGEgZnVuY3Rpb24iKTt0aGlzLl9zdGF0ZT0wLHRoaXMuX2hhbmRsZWQ9ITEsdGhpcy5fdmFsdWU9dW5kZWZpbmVkLHRoaXMuX2RlZmVycmVkcz1bXSxsKGUsdGhpcyl9ZnVuY3Rpb24gaShlLHQpe2Zvcig7Mz09PWUuX3N0YXRlOyllPWUuX3ZhbHVlOzAhPT1lLl9zdGF0ZT8oZS5faGFuZGxlZD0hMCxyLl9pbW1lZGlhdGVGbihmdW5jdGlvbigpe3ZhciBuPTE9PT1lLl9zdGF0ZT90Lm9uRnVsZmlsbGVkOnQub25SZWplY3RlZDtpZihudWxsIT09bil7dmFyIG87dHJ5e289bihlLl92YWx1ZSl9Y2F0Y2gocil7cmV0dXJuIHZvaWQgdSh0LnByb21pc2Uscil9Zih0LnByb21pc2Usbyl9ZWxzZSgxPT09ZS5fc3RhdGU/Zjp1KSh0LnByb21pc2UsZS5fdmFsdWUpfSkpOmUuX2RlZmVycmVkcy5wdXNoKHQpfWZ1bmN0aW9uIGYoZSx0KXt0cnl7aWYodD09PWUpdGhyb3cgbmV3IFR5cGVFcnJvcigiQSBwcm9taXNlIGNhbm5vdCBiZSByZXNvbHZlZCB3aXRoIGl0c2VsZi4iKTtpZih0JiYoIm9iamVjdCI9PXR5cGVvZiB0fHwiZnVuY3Rpb24iPT10eXBlb2YgdCkpe3ZhciBuPXQudGhlbjtpZih0IGluc3RhbmNlb2YgcilyZXR1cm4gZS5fc3RhdGU9MyxlLl92YWx1ZT10LHZvaWQgYyhlKTtpZigiZnVuY3Rpb24iPT10eXBlb2YgbilyZXR1cm4gdm9pZCBsKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGZ1bmN0aW9uKCl7ZS5hcHBseSh0LGFyZ3VtZW50cyl9fShuLHQpLGUpfWUuX3N0YXRlPTEsZS5fdmFsdWU9dCxjKGUpfWNhdGNoKG8pe3UoZSxvKX19ZnVuY3Rpb24gdShlLHQpe2UuX3N0YXRlPTIsZS5fdmFsdWU9dCxjKGUpfWZ1bmN0aW9uIGMoZSl7Mj09PWUuX3N0YXRlJiYwPT09ZS5fZGVmZXJyZWRzLmxlbmd0aCYmci5faW1tZWRpYXRlRm4oZnVuY3Rpb24oKXtlLl9oYW5kbGVkfHxyLl91bmhhbmRsZWRSZWplY3Rpb25GbihlLl92YWx1ZSl9KTtmb3IodmFyIHQ9MCxuPWUuX2RlZmVycmVkcy5sZW5ndGg7bj50O3QrKylpKGUsZS5fZGVmZXJyZWRzW3RdKTtlLl9kZWZlcnJlZHM9bnVsbH1mdW5jdGlvbiBsKGUsdCl7dmFyIG49ITE7dHJ5e2UoZnVuY3Rpb24oZSl7bnx8KG49ITAsZih0LGUpKX0sZnVuY3Rpb24oZSl7bnx8KG49ITAsdSh0LGUpKX0pfWNhdGNoKG8pe2lmKG4pcmV0dXJuO249ITAsdSh0LG8pfX12YXIgYT1zZXRUaW1lb3V0O3IucHJvdG90eXBlWyJjYXRjaCJdPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnRoZW4obnVsbCxlKX0sci5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihlLHQpe3ZhciBuPW5ldyB0aGlzLmNvbnN0cnVjdG9yKG8pO3JldHVybiBpKHRoaXMsbmV3IGZ1bmN0aW9uKGUsdCxuKXt0aGlzLm9uRnVsZmlsbGVkPSJmdW5jdGlvbiI9PXR5cGVvZiBlP2U6bnVsbCx0aGlzLm9uUmVqZWN0ZWQ9ImZ1bmN0aW9uIj09dHlwZW9mIHQ/dDpudWxsLHRoaXMucHJvbWlzZT1ufShlLHQsbikpLG59LHIucHJvdG90eXBlWyJmaW5hbGx5Il09ZSxyLmFsbD1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IHIoZnVuY3Rpb24odCxvKXtmdW5jdGlvbiByKGUsbil7dHJ5e2lmKG4mJigib2JqZWN0Ij09dHlwZW9mIG58fCJmdW5jdGlvbiI9PXR5cGVvZiBuKSl7dmFyIHU9bi50aGVuO2lmKCJmdW5jdGlvbiI9PXR5cGVvZiB1KXJldHVybiB2b2lkIHUuY2FsbChuLGZ1bmN0aW9uKHQpe3IoZSx0KX0sbyl9aVtlXT1uLDA9PS0tZiYmdChpKX1jYXRjaChjKXtvKGMpfX1pZighbihlKSlyZXR1cm4gbyhuZXcgVHlwZUVycm9yKCJQcm9taXNlLmFsbCBhY2NlcHRzIGFuIGFycmF5IikpO3ZhciBpPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGUpO2lmKDA9PT1pLmxlbmd0aClyZXR1cm4gdChbXSk7Zm9yKHZhciBmPWkubGVuZ3RoLHU9MDtpLmxlbmd0aD51O3UrKylyKHUsaVt1XSl9KX0sci5hbGxTZXR0bGVkPXQsci5yZXNvbHZlPWZ1bmN0aW9uKGUpe3JldHVybiBlJiYib2JqZWN0Ij09dHlwZW9mIGUmJmUuY29uc3RydWN0b3I9PT1yP2U6bmV3IHIoZnVuY3Rpb24odCl7dChlKX0pfSxyLnJlamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IHIoZnVuY3Rpb24odCxuKXtuKGUpfSl9LHIucmFjZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IHIoZnVuY3Rpb24odCxvKXtpZighbihlKSlyZXR1cm4gbyhuZXcgVHlwZUVycm9yKCJQcm9taXNlLnJhY2UgYWNjZXB0cyBhbiBhcnJheSIpKTtmb3IodmFyIGk9MCxmPWUubGVuZ3RoO2Y+aTtpKyspci5yZXNvbHZlKGVbaV0pLnRoZW4odCxvKX0pfSxyLl9pbW1lZGlhdGVGbj0iZnVuY3Rpb24iPT10eXBlb2Ygc2V0SW1tZWRpYXRlJiZmdW5jdGlvbihlKXtzZXRJbW1lZGlhdGUoZSl9fHxmdW5jdGlvbihlKXthKGUsMCl9LHIuX3VuaGFuZGxlZFJlamVjdGlvbkZuPWZ1bmN0aW9uKGUpe3ZvaWQgMCE9PWNvbnNvbGUmJmNvbnNvbGUmJmNvbnNvbGUud2FybigiUG9zc2libGUgVW5oYW5kbGVkIFByb21pc2UgUmVqZWN0aW9uOiIsZSl9O3ZhciBzPWZ1bmN0aW9uKCl7aWYoInVuZGVmaW5lZCIhPXR5cGVvZiBzZWxmKXJldHVybiBzZWxmO2lmKCJ1bmRlZmluZWQiIT10eXBlb2Ygd2luZG93KXJldHVybiB3aW5kb3c7aWYoInVuZGVmaW5lZCIhPXR5cGVvZiBnbG9iYWwpcmV0dXJuIGdsb2JhbDt0aHJvdyBFcnJvcigidW5hYmxlIHRvIGxvY2F0ZSBnbG9iYWwgb2JqZWN0Iil9KCk7ImZ1bmN0aW9uIiE9dHlwZW9mIHMuUHJvbWlzZT9zLlByb21pc2U9cjoocy5Qcm9taXNlLnByb3RvdHlwZVsiZmluYWxseSJdfHwocy5Qcm9taXNlLnByb3RvdHlwZVsiZmluYWxseSJdPWUpLHMuUHJvbWlzZS5hbGxTZXR0bGVkfHwocy5Qcm9taXNlLmFsbFNldHRsZWQ9dCkpfSk7dmFyIFdDb252ZXJ3c0NsaWVudD1mdW5jdGlvbih0KXtmdW5jdGlvbiByKHQpe3JldHVybiB0JiYib2JqZWN0Ij09dHlwZW9mIHQmJiJkZWZhdWx0ImluIHQ/dDp7ZGVmYXVsdDp0fX12YXIgbj1yKCk7ZnVuY3Rpb24gZSgpe3JldHVybiJ1bmRlZmluZWQiIT10eXBlb2Ygd2luZG93JiZ2b2lkIDAhPT13aW5kb3cuZG9jdW1lbnR9ZnVuY3Rpb24gbyh0KXt2YXIgcj1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodCk7cmV0dXJuIltvYmplY3QgRnVuY3Rpb25dIj09PXJ8fCJbb2JqZWN0IEFzeW5jRnVuY3Rpb25dIj09PXJ9ZnVuY3Rpb24gaSh0KXt2YXIgcj1udWxsO3QudXJsfHwodC51cmw9IndzOi8vbG9jYWxob3N0OjgwODAiKSx0LnRva2VufHwodC50b2tlbj0iKiIpO3ZhciBpLHU9ZnVuY3Rpb24oKXt2YXIgdD1lKCkscj0idW5kZWZpbmVkIiE9dHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlJiZzZWxmIGluc3RhbmNlb2YgV29ya2VyR2xvYmFsU2NvcGU7cmV0dXJue2lzQnJvd3Nlcjp0PXR8fHIsaXNXZWJXb3JrZXI6cixpc05vZGU6InVuZGVmaW5lZCIhPXR5cGVvZiBwcm9jZXNzJiZudWxsIT1wcm9jZXNzLnZlcnNpb25zJiZudWxsIT1wcm9jZXNzLnZlcnNpb25zLm5vZGV9fSgpLmlzQnJvd3NlcjtpPXU/KCJ1bmRlZmluZWQiIT10eXBlb2Ygc2VsZj9zZWxmOmUoKT93aW5kb3c6InVuZGVmaW5lZCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOm51bGwpLldlYlNvY2tldDpuLmRlZmF1bHQ7dHJ5e3I9bmV3IGkodC51cmwrIi8/dG9rZW49Iit0LnRva2VuKX1jYXRjaCh0KXtyPW51bGx9aWYobnVsbD09PXIpcmV0dXJue2Vycm9yOiJjYW4gbm90IG5ldyBNaXhXUyJ9O2Z1bmN0aW9uIGEoKXtvKHQub3BlbikmJnQub3BlbigpfWZ1bmN0aW9uIGMoKXtvKHQuY2xvc2UpJiZ0LmNsb3NlKCl9ZnVuY3Rpb24gZihyKXtvKHQubWVzc2FnZSkmJnQubWVzc2FnZShyKX1mdW5jdGlvbiBzKG4pe28odC5lcnJvcikmJnQuZXJyb3Iobiksci5jbG9zZSgpfXJldHVybiB1PyhyLm9ub3Blbj1hLHIub25tZXNzYWdlPWZ1bmN0aW9uKHQpe2YodC5kYXRhKX0sci5vbmNsb3NlPWMsci5vbmVycm9yPXMpOihyLm9uKCJvcGVuIixhKSxyLm9uKCJtZXNzYWdlIixmKSxyLm9uKCJjbG9zZSIsYyksci5vbigiZXJyb3IiLHMpKSxyfXZhciB1PUFycmF5LmlzQXJyYXk7ZnVuY3Rpb24gYSh0KXtyZXR1cm4gYT0iZnVuY3Rpb24iPT10eXBlb2YgU3ltYm9sJiYic3ltYm9sIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiYiZnVuY3Rpb24iPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT8ic3ltYm9sIjp0eXBlb2YgdH0sYSh0KX12YXIgYz0idW5kZWZpbmVkIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczoidW5kZWZpbmVkIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6InVuZGVmaW5lZCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOiJ1bmRlZmluZWQiIT10eXBlb2Ygc2VsZj9zZWxmOnt9O2Z1bmN0aW9uIGYodCl7aWYodC5fX2VzTW9kdWxlKXJldHVybiB0O3ZhciByPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7cmV0dXJuIE9iamVjdC5rZXlzKHQpLmZvckVhY2goKGZ1bmN0aW9uKG4pe3ZhciBlPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCxuKTtPYmplY3QuZGVmaW5lUHJvcGVydHkocixuLGUuZ2V0P2U6e2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRbbl19fSl9KSkscn1mdW5jdGlvbiBzKHQpe3ZhciByPXtleHBvcnRzOnt9fTtyZXR1cm4gdChyLHIuZXhwb3J0cyksci5leHBvcnRzfXZhciBsPSJvYmplY3QiPT1hKGMpJiZjJiZjLk9iamVjdD09PU9iamVjdCYmYyx2PSJvYmplY3QiPT0oInVuZGVmaW5lZCI9PXR5cGVvZiBzZWxmPyJ1bmRlZmluZWQiOmEoc2VsZikpJiZzZWxmJiZzZWxmLk9iamVjdD09PU9iamVjdCYmc2VsZixwPWx8fHZ8fEZ1bmN0aW9uKCJyZXR1cm4gdGhpcyIpKCkseT1wLlN5bWJvbCxoPU9iamVjdC5wcm90b3R5cGUsZD1oLmhhc093blByb3BlcnR5LGc9aC50b1N0cmluZyxiPXk/eS50b1N0cmluZ1RhZzp2b2lkIDA7dmFyIF89ZnVuY3Rpb24odCl7dmFyIHI9ZC5jYWxsKHQsYiksbj10W2JdO3RyeXt0W2JdPXZvaWQgMDt2YXIgZT0hMH1jYXRjaCh0KXt9dmFyIG89Zy5jYWxsKHQpO3JldHVybiBlJiYocj90W2JdPW46ZGVsZXRlIHRbYl0pLG99LHc9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZzt2YXIgbT1mdW5jdGlvbih0KXtyZXR1cm4gdy5jYWxsKHQpfSxqPXk/eS50b1N0cmluZ1RhZzp2b2lkIDA7dmFyIEE9ZnVuY3Rpb24odCl7cmV0dXJuIG51bGw9PXQ/dm9pZCAwPT09dD8iW29iamVjdCBVbmRlZmluZWRdIjoiW29iamVjdCBOdWxsXSI6aiYmaiBpbiBPYmplY3QodCk/Xyh0KTptKHQpfTt2YXIgTz1mdW5jdGlvbih0KXtyZXR1cm4gbnVsbCE9dCYmIm9iamVjdCI9PWEodCl9O3ZhciB4PWZ1bmN0aW9uKHQpe3JldHVybiJzeW1ib2wiPT1hKHQpfHxPKHQpJiYiW29iamVjdCBTeW1ib2xdIj09QSh0KX0sUz0vXC58XFsoPzpbXltcXV0qfChbIiddKSg/Oig/IVwxKVteXFxdfFxcLikqP1wxKVxdLyxVPS9eXHcqJC87dmFyIEI9ZnVuY3Rpb24odCxyKXtpZih1KHQpKXJldHVybiExO3ZhciBuPWEodCk7cmV0dXJuISgibnVtYmVyIiE9biYmInN5bWJvbCIhPW4mJiJib29sZWFuIiE9biYmbnVsbCE9dCYmIXgodCkpfHwoVS50ZXN0KHQpfHwhUy50ZXN0KHQpfHxudWxsIT1yJiZ0IGluIE9iamVjdChyKSl9O3ZhciBrPWZ1bmN0aW9uKHQpe3ZhciByPWEodCk7cmV0dXJuIG51bGwhPXQmJigib2JqZWN0Ij09cnx8ImZ1bmN0aW9uIj09cil9O3ZhciBDLEU9ZnVuY3Rpb24odCl7aWYoIWsodCkpcmV0dXJuITE7dmFyIHI9QSh0KTtyZXR1cm4iW29iamVjdCBGdW5jdGlvbl0iPT1yfHwiW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0iPT1yfHwiW29iamVjdCBBc3luY0Z1bmN0aW9uXSI9PXJ8fCJbb2JqZWN0IFByb3h5XSI9PXJ9LFA9cFsiX19jb3JlLWpzX3NoYXJlZF9fIl0sej0oQz0vW14uXSskLy5leGVjKFAmJlAua2V5cyYmUC5rZXlzLklFX1BST1RPfHwiIikpPyJTeW1ib2woc3JjKV8xLiIrQzoiIjt2YXIgTT1mdW5jdGlvbih0KXtyZXR1cm4hIXomJnogaW4gdH0sVD1GdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmc7dmFyIEw9ZnVuY3Rpb24odCl7aWYobnVsbCE9dCl7dHJ5e3JldHVybiBULmNhbGwodCl9Y2F0Y2godCl7fXRyeXtyZXR1cm4gdCsiIn1jYXRjaCh0KXt9fXJldHVybiIifSxJPS9eXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXSQvLEY9RnVuY3Rpb24ucHJvdG90eXBlLE49T2JqZWN0LnByb3RvdHlwZSxXPUYudG9TdHJpbmcsJD1OLmhhc093blByb3BlcnR5LFI9UmVnRXhwKCJeIitXLmNhbGwoJCkucmVwbGFjZSgvW1xcXiQuKis/KClbXF17fXxdL2csIlxcJCYiKS5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcKCl8IGZvciAuKz8oPz1cXFxdKS9nLCIkMS4qPyIpKyIkIik7dmFyIEQ9ZnVuY3Rpb24odCl7cmV0dXJuISghayh0KXx8TSh0KSkmJihFKHQpP1I6SSkudGVzdChMKHQpKX07dmFyIEg9ZnVuY3Rpb24odCxyKXtyZXR1cm4gbnVsbD09dD92b2lkIDA6dFtyXX07dmFyIEc9ZnVuY3Rpb24odCxyKXt2YXIgbj1IKHQscik7cmV0dXJuIEQobik/bjp2b2lkIDB9LFY9RyhPYmplY3QsImNyZWF0ZSIpO3ZhciBxPWZ1bmN0aW9uKCl7dGhpcy5fX2RhdGFfXz1WP1YobnVsbCk6e30sdGhpcy5zaXplPTB9O3ZhciBKPWZ1bmN0aW9uKHQpe3ZhciByPXRoaXMuaGFzKHQpJiZkZWxldGUgdGhpcy5fX2RhdGFfX1t0XTtyZXR1cm4gdGhpcy5zaXplLT1yPzE6MCxyfSxLPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7dmFyIFE9ZnVuY3Rpb24odCl7dmFyIHI9dGhpcy5fX2RhdGFfXztpZihWKXt2YXIgbj1yW3RdO3JldHVybiJfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fIj09PW4/dm9pZCAwOm59cmV0dXJuIEsuY2FsbChyLHQpP3JbdF06dm9pZCAwfSxYPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7dmFyIFk9ZnVuY3Rpb24odCl7dmFyIHI9dGhpcy5fX2RhdGFfXztyZXR1cm4gVj92b2lkIDAhPT1yW3RdOlguY2FsbChyLHQpfTt2YXIgWj1mdW5jdGlvbih0LHIpe3ZhciBuPXRoaXMuX19kYXRhX187cmV0dXJuIHRoaXMuc2l6ZSs9dGhpcy5oYXModCk/MDoxLG5bdF09ViYmdm9pZCAwPT09cj8iX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyI6cix0aGlzfTtmdW5jdGlvbiB0dCh0KXt2YXIgcj0tMSxuPW51bGw9PXQ/MDp0Lmxlbmd0aDtmb3IodGhpcy5jbGVhcigpOysrcjxuOyl7dmFyIGU9dFtyXTt0aGlzLnNldChlWzBdLGVbMV0pfX10dC5wcm90b3R5cGUuY2xlYXI9cSx0dC5wcm90b3R5cGUuZGVsZXRlPUosdHQucHJvdG90eXBlLmdldD1RLHR0LnByb3RvdHlwZS5oYXM9WSx0dC5wcm90b3R5cGUuc2V0PVo7dmFyIHJ0PXR0O3ZhciBudD1mdW5jdGlvbigpe3RoaXMuX19kYXRhX189W10sdGhpcy5zaXplPTB9O3ZhciBldD1mdW5jdGlvbih0LHIpe3JldHVybiB0PT09cnx8dCE9dCYmciE9cn07dmFyIG90PWZ1bmN0aW9uKHQscil7Zm9yKHZhciBuPXQubGVuZ3RoO24tLTspaWYoZXQodFtuXVswXSxyKSlyZXR1cm4gbjtyZXR1cm4tMX0saXQ9QXJyYXkucHJvdG90eXBlLnNwbGljZTt2YXIgdXQ9ZnVuY3Rpb24odCl7dmFyIHI9dGhpcy5fX2RhdGFfXyxuPW90KHIsdCk7cmV0dXJuIShuPDApJiYobj09ci5sZW5ndGgtMT9yLnBvcCgpOml0LmNhbGwocixuLDEpLC0tdGhpcy5zaXplLCEwKX07dmFyIGF0PWZ1bmN0aW9uKHQpe3ZhciByPXRoaXMuX19kYXRhX18sbj1vdChyLHQpO3JldHVybiBuPDA/dm9pZCAwOnJbbl1bMV19O3ZhciBjdD1mdW5jdGlvbih0KXtyZXR1cm4gb3QodGhpcy5fX2RhdGFfXyx0KT4tMX07dmFyIGZ0PWZ1bmN0aW9uKHQscil7dmFyIG49dGhpcy5fX2RhdGFfXyxlPW90KG4sdCk7cmV0dXJuIGU8MD8oKyt0aGlzLnNpemUsbi5wdXNoKFt0LHJdKSk6bltlXVsxXT1yLHRoaXN9O2Z1bmN0aW9uIHN0KHQpe3ZhciByPS0xLG49bnVsbD09dD8wOnQubGVuZ3RoO2Zvcih0aGlzLmNsZWFyKCk7KytyPG47KXt2YXIgZT10W3JdO3RoaXMuc2V0KGVbMF0sZVsxXSl9fXN0LnByb3RvdHlwZS5jbGVhcj1udCxzdC5wcm90b3R5cGUuZGVsZXRlPXV0LHN0LnByb3RvdHlwZS5nZXQ9YXQsc3QucHJvdG90eXBlLmhhcz1jdCxzdC5wcm90b3R5cGUuc2V0PWZ0O3ZhciBsdD1zdCx2dD1HKHAsIk1hcCIpO3ZhciBwdD1mdW5jdGlvbigpe3RoaXMuc2l6ZT0wLHRoaXMuX19kYXRhX189e2hhc2g6bmV3IHJ0LG1hcDpuZXcodnR8fGx0KSxzdHJpbmc6bmV3IHJ0fX07dmFyIHl0PWZ1bmN0aW9uKHQpe3ZhciByPWEodCk7cmV0dXJuInN0cmluZyI9PXJ8fCJudW1iZXIiPT1yfHwic3ltYm9sIj09cnx8ImJvb2xlYW4iPT1yPyJfX3Byb3RvX18iIT09dDpudWxsPT09dH07dmFyIGh0PWZ1bmN0aW9uKHQscil7dmFyIG49dC5fX2RhdGFfXztyZXR1cm4geXQocik/blsic3RyaW5nIj09dHlwZW9mIHI/InN0cmluZyI6Imhhc2giXTpuLm1hcH07dmFyIGR0PWZ1bmN0aW9uKHQpe3ZhciByPWh0KHRoaXMsdCkuZGVsZXRlKHQpO3JldHVybiB0aGlzLnNpemUtPXI/MTowLHJ9O3ZhciBndD1mdW5jdGlvbih0KXtyZXR1cm4gaHQodGhpcyx0KS5nZXQodCl9O3ZhciBidD1mdW5jdGlvbih0KXtyZXR1cm4gaHQodGhpcyx0KS5oYXModCl9O3ZhciBfdD1mdW5jdGlvbih0LHIpe3ZhciBuPWh0KHRoaXMsdCksZT1uLnNpemU7cmV0dXJuIG4uc2V0KHQsciksdGhpcy5zaXplKz1uLnNpemU9PWU/MDoxLHRoaXN9O2Z1bmN0aW9uIHd0KHQpe3ZhciByPS0xLG49bnVsbD09dD8wOnQubGVuZ3RoO2Zvcih0aGlzLmNsZWFyKCk7KytyPG47KXt2YXIgZT10W3JdO3RoaXMuc2V0KGVbMF0sZVsxXSl9fXd0LnByb3RvdHlwZS5jbGVhcj1wdCx3dC5wcm90b3R5cGUuZGVsZXRlPWR0LHd0LnByb3RvdHlwZS5nZXQ9Z3Qsd3QucHJvdG90eXBlLmhhcz1idCx3dC5wcm90b3R5cGUuc2V0PV90O3ZhciBtdD13dDtmdW5jdGlvbiBqdCh0LHIpe2lmKCJmdW5jdGlvbiIhPXR5cGVvZiB0fHxudWxsIT1yJiYiZnVuY3Rpb24iIT10eXBlb2Ygcil0aHJvdyBuZXcgVHlwZUVycm9yKCJFeHBlY3RlZCBhIGZ1bmN0aW9uIik7dmFyIG49ZnVuY3Rpb24gbigpe3ZhciBlPWFyZ3VtZW50cyxvPXI/ci5hcHBseSh0aGlzLGUpOmVbMF0saT1uLmNhY2hlO2lmKGkuaGFzKG8pKXJldHVybiBpLmdldChvKTt2YXIgdT10LmFwcGx5KHRoaXMsZSk7cmV0dXJuIG4uY2FjaGU9aS5zZXQobyx1KXx8aSx1fTtyZXR1cm4gbi5jYWNoZT1uZXcoanQuQ2FjaGV8fG10KSxufWp0LkNhY2hlPW10O3ZhciBBdD1qdDt2YXIgT3Q9L1teLltcXV0rfFxbKD86KC0/XGQrKD86XC5cZCspPyl8KFsiJ10pKCg/Oig/IVwyKVteXFxdfFxcLikqPylcMilcXXwoPz0oPzpcLnxcW1xdKSg/OlwufFxbXF18JCkpL2cseHQ9L1xcKFxcKT8vZyxTdD1mdW5jdGlvbih0KXt2YXIgcj1BdCh0LChmdW5jdGlvbih0KXtyZXR1cm4gNTAwPT09bi5zaXplJiZuLmNsZWFyKCksdH0pKSxuPXIuY2FjaGU7cmV0dXJuIHJ9KChmdW5jdGlvbih0KXt2YXIgcj1bXTtyZXR1cm4gNDY9PT10LmNoYXJDb2RlQXQoMCkmJnIucHVzaCgiIiksdC5yZXBsYWNlKE90LChmdW5jdGlvbih0LG4sZSxvKXtyLnB1c2goZT9vLnJlcGxhY2UoeHQsIiQxIik6bnx8dCl9KSkscn0pKTt2YXIgVXQ9ZnVuY3Rpb24odCxyKXtmb3IodmFyIG49LTEsZT1udWxsPT10PzA6dC5sZW5ndGgsbz1BcnJheShlKTsrK248ZTspb1tuXT1yKHRbbl0sbix0KTtyZXR1cm4gb30sQnQ9eT95LnByb3RvdHlwZTp2b2lkIDAsa3Q9QnQ/QnQudG9TdHJpbmc6dm9pZCAwO3ZhciBDdD1mdW5jdGlvbiB0KHIpe2lmKCJzdHJpbmciPT10eXBlb2YgcilyZXR1cm4gcjtpZih1KHIpKXJldHVybiBVdChyLHQpKyIiO2lmKHgocikpcmV0dXJuIGt0P2t0LmNhbGwocik6IiI7dmFyIG49cisiIjtyZXR1cm4iMCI9PW4mJjEvcj09LUluZmluaXR5PyItMCI6bn07dmFyIEV0PWZ1bmN0aW9uKHQpe3JldHVybiBudWxsPT10PyIiOkN0KHQpfTt2YXIgUHQ9ZnVuY3Rpb24odCxyKXtyZXR1cm4gdSh0KT90OkIodCxyKT9bdF06U3QoRXQodCkpfTt2YXIgenQ9ZnVuY3Rpb24odCl7aWYoInN0cmluZyI9PXR5cGVvZiB0fHx4KHQpKXJldHVybiB0O3ZhciByPXQrIiI7cmV0dXJuIjAiPT1yJiYxL3Q9PS1JbmZpbml0eT8iLTAiOnJ9O3ZhciBNdD1mdW5jdGlvbih0LHIpe2Zvcih2YXIgbj0wLGU9KHI9UHQocix0KSkubGVuZ3RoO251bGwhPXQmJm48ZTspdD10W3p0KHJbbisrXSldO3JldHVybiBuJiZuPT1lP3Q6dm9pZCAwfTt2YXIgVHQ9ZnVuY3Rpb24odCxyLG4pe3ZhciBlPW51bGw9PXQ/dm9pZCAwOk10KHQscik7cmV0dXJuIHZvaWQgMD09PWU/bjplfTtmdW5jdGlvbiBMdCgpe3ZhciB0LHIsbj1uZXcgUHJvbWlzZSgoZnVuY3Rpb24oKXt0PWFyZ3VtZW50c1swXSxyPWFyZ3VtZW50c1sxXX0pKTtyZXR1cm4gbi5yZXNvbHZlPXQsbi5yZWplY3Q9cixufXZhciBJdD0vXHMvO3ZhciBGdD1mdW5jdGlvbih0KXtmb3IodmFyIHI9dC5sZW5ndGg7ci0tJiZJdC50ZXN0KHQuY2hhckF0KHIpKTspO3JldHVybiByfSxOdD0vXlxzKy87dmFyIFd0PWZ1bmN0aW9uKHQpe3JldHVybiB0P3Quc2xpY2UoMCxGdCh0KSsxKS5yZXBsYWNlKE50LCIiKTp0fSwkdD0vXlstK10weFswLTlhLWZdKyQvaSxSdD0vXjBiWzAxXSskL2ksRHQ9L14wb1swLTddKyQvaSxIdD1wYXJzZUludDt2YXIgR3Q9ZnVuY3Rpb24odCl7aWYoIm51bWJlciI9PXR5cGVvZiB0KXJldHVybiB0O2lmKHgodCkpcmV0dXJuIE5hTjtpZihrKHQpKXt2YXIgcj0iZnVuY3Rpb24iPT10eXBlb2YgdC52YWx1ZU9mP3QudmFsdWVPZigpOnQ7dD1rKHIpP3IrIiI6cn1pZigic3RyaW5nIiE9dHlwZW9mIHQpcmV0dXJuIDA9PT10P3Q6K3Q7dD1XdCh0KTt2YXIgbj1SdC50ZXN0KHQpO3JldHVybiBufHxEdC50ZXN0KHQpP0h0KHQuc2xpY2UoMiksbj8yOjgpOiR0LnRlc3QodCk/TmFOOit0fSxWdD0xLzA7dmFyIHF0PWZ1bmN0aW9uKHQpe3JldHVybiB0Pyh0PUd0KHQpKT09PVZ0fHx0PT09LTEvMD8xNzk3NjkzMTM0ODYyMzE1N2UyOTIqKHQ8MD8tMToxKTp0PT10P3Q6MDowPT09dD90OjB9O3ZhciBKdD1mdW5jdGlvbih0KXt2YXIgcj1xdCh0KSxuPXIlMTtyZXR1cm4gcj09cj9uP3ItbjpyOjB9O3ZhciBLdD1mdW5jdGlvbih0KXtyZXR1cm4ibnVtYmVyIj09dHlwZW9mIHQmJnQ9PUp0KHQpfTtmdW5jdGlvbiBRdCh0KXtyZXR1cm4iW29iamVjdCBTdHJpbmddIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KX1mdW5jdGlvbiBYdCh0KXtyZXR1cm4hKCFRdCh0KXx8IiI9PT10KX1mdW5jdGlvbiBZdCh0KXt2YXIgcj0hMTtyZXR1cm4gWHQodCk/cj0haXNOYU4oTnVtYmVyKHQpKTpmdW5jdGlvbih0KXtyZXR1cm4iW29iamVjdCBOdW1iZXJdIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KX0odCkmJihyPSEwKSxyfWZ1bmN0aW9uIFp0KHQpe3JldHVybiBZdCh0KT9xdCh0KTowfWZ1bmN0aW9uIHRyKHQpe3JldHVybiEhWXQodCkmJih0PVp0KHQpLEt0KHQpKX12YXIgcnI9cC5pc0Zpbml0ZSxucj1NYXRoLm1pbjt2YXIgZXI9ZnVuY3Rpb24odCl7dmFyIHI9TWF0aFt0XTtyZXR1cm4gZnVuY3Rpb24odCxuKXtpZih0PUd0KHQpLChuPW51bGw9PW4/MDpucihKdChuKSwyOTIpKSYmcnIodCkpe3ZhciBlPShFdCh0KSsiZSIpLnNwbGl0KCJlIiksbz1yKGVbMF0rImUiKygrZVsxXStuKSk7cmV0dXJuKygoZT0oRXQobykrImUiKS5zcGxpdCgiZSIpKVswXSsiZSIrKCtlWzFdLW4pKX1yZXR1cm4gcih0KX19KCJyb3VuZCIpO2Z1bmN0aW9uIG9yKHQpe2lmKCFZdCh0KSlyZXR1cm4gMDt0PVp0KHQpO3ZhciByPWVyKHQpO3JldHVybiIwIj09PVN0cmluZyhyKT8wOnJ9ZnVuY3Rpb24gaXIodCl7cmV0dXJuISF0cih0KSYmb3IodCk+MH12YXIgdXI9IjAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6Ii5zcGxpdCgiIiksYXI9dXIubGVuZ3RoO2Z1bmN0aW9uIGNyKCl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOjMyLHI9W107dD1pcih0KT9vcih0KTozMjtmb3IodmFyIG49MDtuPHQ7bisrKXJbbl09dXJbMHxNYXRoLnJhbmRvbSgpKmFyXTt2YXIgZT1yLmpvaW4oIiIpO3JldHVybiBlfXZhciBmcj1zKChmdW5jdGlvbih0KXt2YXIgcj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LG49In4iO2Z1bmN0aW9uIGUoKXt9ZnVuY3Rpb24gbyh0LHIsbil7dGhpcy5mbj10LHRoaXMuY29udGV4dD1yLHRoaXMub25jZT1ufHwhMX1mdW5jdGlvbiBpKHQscixlLGksdSl7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcigiVGhlIGxpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbiIpO3ZhciBhPW5ldyBvKGUsaXx8dCx1KSxjPW4/bityOnI7cmV0dXJuIHQuX2V2ZW50c1tjXT90Ll9ldmVudHNbY10uZm4/dC5fZXZlbnRzW2NdPVt0Ll9ldmVudHNbY10sYV06dC5fZXZlbnRzW2NdLnB1c2goYSk6KHQuX2V2ZW50c1tjXT1hLHQuX2V2ZW50c0NvdW50KyspLHR9ZnVuY3Rpb24gdSh0LHIpezA9PS0tdC5fZXZlbnRzQ291bnQ/dC5fZXZlbnRzPW5ldyBlOmRlbGV0ZSB0Ll9ldmVudHNbcl19ZnVuY3Rpb24gYSgpe3RoaXMuX2V2ZW50cz1uZXcgZSx0aGlzLl9ldmVudHNDb3VudD0wfU9iamVjdC5jcmVhdGUmJihlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKG51bGwpLChuZXcgZSkuX19wcm90b19ffHwobj0hMSkpLGEucHJvdG90eXBlLmV2ZW50TmFtZXM9ZnVuY3Rpb24oKXt2YXIgdCxlLG89W107aWYoMD09PXRoaXMuX2V2ZW50c0NvdW50KXJldHVybiBvO2ZvcihlIGluIHQ9dGhpcy5fZXZlbnRzKXIuY2FsbCh0LGUpJiZvLnB1c2gobj9lLnNsaWNlKDEpOmUpO3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzP28uY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModCkpOm99LGEucHJvdG90eXBlLmxpc3RlbmVycz1mdW5jdGlvbih0KXt2YXIgcj1uP24rdDp0LGU9dGhpcy5fZXZlbnRzW3JdO2lmKCFlKXJldHVybltdO2lmKGUuZm4pcmV0dXJuW2UuZm5dO2Zvcih2YXIgbz0wLGk9ZS5sZW5ndGgsdT1uZXcgQXJyYXkoaSk7bzxpO28rKyl1W29dPWVbb10uZm47cmV0dXJuIHV9LGEucHJvdG90eXBlLmxpc3RlbmVyQ291bnQ9ZnVuY3Rpb24odCl7dmFyIHI9bj9uK3Q6dCxlPXRoaXMuX2V2ZW50c1tyXTtyZXR1cm4gZT9lLmZuPzE6ZS5sZW5ndGg6MH0sYS5wcm90b3R5cGUuZW1pdD1mdW5jdGlvbih0LHIsZSxvLGksdSl7dmFyIGE9bj9uK3Q6dDtpZighdGhpcy5fZXZlbnRzW2FdKXJldHVybiExO3ZhciBjLGYscz10aGlzLl9ldmVudHNbYV0sbD1hcmd1bWVudHMubGVuZ3RoO2lmKHMuZm4pe3N3aXRjaChzLm9uY2UmJnRoaXMucmVtb3ZlTGlzdGVuZXIodCxzLmZuLHZvaWQgMCwhMCksbCl7Y2FzZSAxOnJldHVybiBzLmZuLmNhbGwocy5jb250ZXh0KSwhMDtjYXNlIDI6cmV0dXJuIHMuZm4uY2FsbChzLmNvbnRleHQsciksITA7Y2FzZSAzOnJldHVybiBzLmZuLmNhbGwocy5jb250ZXh0LHIsZSksITA7Y2FzZSA0OnJldHVybiBzLmZuLmNhbGwocy5jb250ZXh0LHIsZSxvKSwhMDtjYXNlIDU6cmV0dXJuIHMuZm4uY2FsbChzLmNvbnRleHQscixlLG8saSksITA7Y2FzZSA2OnJldHVybiBzLmZuLmNhbGwocy5jb250ZXh0LHIsZSxvLGksdSksITB9Zm9yKGY9MSxjPW5ldyBBcnJheShsLTEpO2Y8bDtmKyspY1tmLTFdPWFyZ3VtZW50c1tmXTtzLmZuLmFwcGx5KHMuY29udGV4dCxjKX1lbHNle3ZhciB2LHA9cy5sZW5ndGg7Zm9yKGY9MDtmPHA7ZisrKXN3aXRjaChzW2ZdLm9uY2UmJnRoaXMucmVtb3ZlTGlzdGVuZXIodCxzW2ZdLmZuLHZvaWQgMCwhMCksbCl7Y2FzZSAxOnNbZl0uZm4uY2FsbChzW2ZdLmNvbnRleHQpO2JyZWFrO2Nhc2UgMjpzW2ZdLmZuLmNhbGwoc1tmXS5jb250ZXh0LHIpO2JyZWFrO2Nhc2UgMzpzW2ZdLmZuLmNhbGwoc1tmXS5jb250ZXh0LHIsZSk7YnJlYWs7Y2FzZSA0OnNbZl0uZm4uY2FsbChzW2ZdLmNvbnRleHQscixlLG8pO2JyZWFrO2RlZmF1bHQ6aWYoIWMpZm9yKHY9MSxjPW5ldyBBcnJheShsLTEpO3Y8bDt2KyspY1t2LTFdPWFyZ3VtZW50c1t2XTtzW2ZdLmZuLmFwcGx5KHNbZl0uY29udGV4dCxjKX19cmV0dXJuITB9LGEucHJvdG90eXBlLm9uPWZ1bmN0aW9uKHQscixuKXtyZXR1cm4gaSh0aGlzLHQscixuLCExKX0sYS5wcm90b3R5cGUub25jZT1mdW5jdGlvbih0LHIsbil7cmV0dXJuIGkodGhpcyx0LHIsbiwhMCl9LGEucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyPWZ1bmN0aW9uKHQscixlLG8pe3ZhciBpPW4/bit0OnQ7aWYoIXRoaXMuX2V2ZW50c1tpXSlyZXR1cm4gdGhpcztpZighcilyZXR1cm4gdSh0aGlzLGkpLHRoaXM7dmFyIGE9dGhpcy5fZXZlbnRzW2ldO2lmKGEuZm4pYS5mbiE9PXJ8fG8mJiFhLm9uY2V8fGUmJmEuY29udGV4dCE9PWV8fHUodGhpcyxpKTtlbHNle2Zvcih2YXIgYz0wLGY9W10scz1hLmxlbmd0aDtjPHM7YysrKShhW2NdLmZuIT09cnx8byYmIWFbY10ub25jZXx8ZSYmYVtjXS5jb250ZXh0IT09ZSkmJmYucHVzaChhW2NdKTtmLmxlbmd0aD90aGlzLl9ldmVudHNbaV09MT09PWYubGVuZ3RoP2ZbMF06Zjp1KHRoaXMsaSl9cmV0dXJuIHRoaXN9LGEucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycz1mdW5jdGlvbih0KXt2YXIgcjtyZXR1cm4gdD8ocj1uP24rdDp0LHRoaXMuX2V2ZW50c1tyXSYmdSh0aGlzLHIpKToodGhpcy5fZXZlbnRzPW5ldyBlLHRoaXMuX2V2ZW50c0NvdW50PTApLHRoaXN9LGEucHJvdG90eXBlLm9mZj1hLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcixhLnByb3RvdHlwZS5hZGRMaXN0ZW5lcj1hLnByb3RvdHlwZS5vbixhLnByZWZpeGVkPW4sYS5FdmVudEVtaXR0ZXI9YSx0LmV4cG9ydHM9YX0pKTtmdW5jdGlvbiBzcigpe3JldHVybiBuZXcgZnJ9dmFyIGxyPWZ1bmN0aW9uKHQscixuKXt2YXIgZT0tMSxvPXQubGVuZ3RoO3I8MCYmKHI9LXI+bz8wOm8rciksKG49bj5vP286bik8MCYmKG4rPW8pLG89cj5uPzA6bi1yPj4+MCxyPj4+PTA7Zm9yKHZhciBpPUFycmF5KG8pOysrZTxvOylpW2VdPXRbZStyXTtyZXR1cm4gaX07dmFyIHZyPWZ1bmN0aW9uKHQpe3JldHVybiJudW1iZXIiPT10eXBlb2YgdCYmdD4tMSYmdCUxPT0wJiZ0PD05MDA3MTk5MjU0NzQwOTkxfTt2YXIgcHI9ZnVuY3Rpb24odCl7cmV0dXJuIG51bGwhPXQmJnZyKHQubGVuZ3RoKSYmIUUodCl9LHlyPS9eKD86MHxbMS05XVxkKikkLzt2YXIgaHI9ZnVuY3Rpb24odCxyKXt2YXIgbj1hKHQpO3JldHVybiEhKHI9bnVsbD09cj85MDA3MTk5MjU0NzQwOTkxOnIpJiYoIm51bWJlciI9PW58fCJzeW1ib2wiIT1uJiZ5ci50ZXN0KHQpKSYmdD4tMSYmdCUxPT0wJiZ0PHJ9O3ZhciBkcj1mdW5jdGlvbih0LHIsbil7aWYoIWsobikpcmV0dXJuITE7dmFyIGU9YShyKTtyZXR1cm4hISgibnVtYmVyIj09ZT9wcihuKSYmaHIocixuLmxlbmd0aCk6InN0cmluZyI9PWUmJnIgaW4gbikmJmV0KG5bcl0sdCl9LGdyPU1hdGguY2VpbCxicj1NYXRoLm1heDt2YXIgX3I9ZnVuY3Rpb24odCxyLG4pe3I9KG4/ZHIodCxyLG4pOnZvaWQgMD09PXIpPzE6YnIoSnQociksMCk7dmFyIGU9bnVsbD09dD8wOnQubGVuZ3RoO2lmKCFlfHxyPDEpcmV0dXJuW107Zm9yKHZhciBvPTAsaT0wLHU9QXJyYXkoZ3IoZS9yKSk7bzxlOyl1W2krK109bHIodCxvLG8rPXIpO3JldHVybiB1fSx3cj1BcnJheS5wcm90b3R5cGUuam9pbjt2YXIgbXI9ZnVuY3Rpb24odCxyKXtyZXR1cm4gbnVsbD09dD8iIjp3ci5jYWxsKHQscil9O3ZhciBqcj1mdW5jdGlvbih0LHIpe2Zvcih2YXIgbj0tMSxlPW51bGw9PXQ/MDp0Lmxlbmd0aDsrK248ZSYmITEhPT1yKHRbbl0sbix0KTspO3JldHVybiB0fTt2YXIgQXI9ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKHIsbixlKXtmb3IodmFyIG89LTEsaT1PYmplY3QociksdT1lKHIpLGE9dS5sZW5ndGg7YS0tOyl7dmFyIGM9dVt0P2E6KytvXTtpZighMT09PW4oaVtjXSxjLGkpKWJyZWFrfXJldHVybiByfX0oKTt2YXIgT3I9ZnVuY3Rpb24odCxyKXtmb3IodmFyIG49LTEsZT1BcnJheSh0KTsrK248dDspZVtuXT1yKG4pO3JldHVybiBlfTt2YXIgeHI9ZnVuY3Rpb24odCl7cmV0dXJuIE8odCkmJiJbb2JqZWN0IEFyZ3VtZW50c10iPT1BKHQpfSxTcj1PYmplY3QucHJvdG90eXBlLFVyPVNyLmhhc093blByb3BlcnR5LEJyPVNyLnByb3BlcnR5SXNFbnVtZXJhYmxlLGtyPXhyKGZ1bmN0aW9uKCl7cmV0dXJuIGFyZ3VtZW50c30oKSk/eHI6ZnVuY3Rpb24odCl7cmV0dXJuIE8odCkmJlVyLmNhbGwodCwiY2FsbGVlIikmJiFCci5jYWxsKHQsImNhbGxlZSIpfSxDcj1rcjt2YXIgRXI9ZnVuY3Rpb24oKXtyZXR1cm4hMX0sUHI9cygoZnVuY3Rpb24odCxyKXt2YXIgbj1yJiYhci5ub2RlVHlwZSYmcixlPW4mJnQmJiF0Lm5vZGVUeXBlJiZ0LG89ZSYmZS5leHBvcnRzPT09bj9wLkJ1ZmZlcjp2b2lkIDAsaT0obz9vLmlzQnVmZmVyOnZvaWQgMCl8fEVyO3QuZXhwb3J0cz1pfSkpLHpyPXt9O3pyWyJbb2JqZWN0IEZsb2F0MzJBcnJheV0iXT16clsiW29iamVjdCBGbG9hdDY0QXJyYXldIl09enJbIltvYmplY3QgSW50OEFycmF5XSJdPXpyWyJbb2JqZWN0IEludDE2QXJyYXldIl09enJbIltvYmplY3QgSW50MzJBcnJheV0iXT16clsiW29iamVjdCBVaW50OEFycmF5XSJdPXpyWyJbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XSJdPXpyWyJbb2JqZWN0IFVpbnQxNkFycmF5XSJdPXpyWyJbb2JqZWN0IFVpbnQzMkFycmF5XSJdPSEwLHpyWyJbb2JqZWN0IEFyZ3VtZW50c10iXT16clsiW29iamVjdCBBcnJheV0iXT16clsiW29iamVjdCBBcnJheUJ1ZmZlcl0iXT16clsiW29iamVjdCBCb29sZWFuXSJdPXpyWyJbb2JqZWN0IERhdGFWaWV3XSJdPXpyWyJbb2JqZWN0IERhdGVdIl09enJbIltvYmplY3QgRXJyb3JdIl09enJbIltvYmplY3QgRnVuY3Rpb25dIl09enJbIltvYmplY3QgTWFwXSJdPXpyWyJbb2JqZWN0IE51bWJlcl0iXT16clsiW29iamVjdCBPYmplY3RdIl09enJbIltvYmplY3QgUmVnRXhwXSJdPXpyWyJbb2JqZWN0IFNldF0iXT16clsiW29iamVjdCBTdHJpbmddIl09enJbIltvYmplY3QgV2Vha01hcF0iXT0hMTt2YXIgTXI9ZnVuY3Rpb24odCl7cmV0dXJuIE8odCkmJnZyKHQubGVuZ3RoKSYmISF6cltBKHQpXX07dmFyIFRyPWZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihyKXtyZXR1cm4gdChyKX19LExyPXMoKGZ1bmN0aW9uKHQscil7dmFyIG49ciYmIXIubm9kZVR5cGUmJnIsZT1uJiZ0JiYhdC5ub2RlVHlwZSYmdCxvPWUmJmUuZXhwb3J0cz09PW4mJmwucHJvY2VzcyxpPWZ1bmN0aW9uKCl7dHJ5e3ZhciB0PWUmJmUucmVxdWlyZSYmZS5yZXF1aXJlKCJ1dGlsIikudHlwZXM7cmV0dXJuIHR8fG8mJm8uYmluZGluZyYmby5iaW5kaW5nKCJ1dGlsIil9Y2F0Y2godCl7fX0oKTt0LmV4cG9ydHM9aX0pKSxJcj1MciYmTHIuaXNUeXBlZEFycmF5LEZyPUlyP1RyKElyKTpNcixOcj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O3ZhciBXcj1mdW5jdGlvbih0LHIpe3ZhciBuPXUodCksZT0hbiYmQ3IodCksbz0hbiYmIWUmJlByKHQpLGk9IW4mJiFlJiYhbyYmRnIodCksYT1ufHxlfHxvfHxpLGM9YT9Pcih0Lmxlbmd0aCxTdHJpbmcpOltdLGY9Yy5sZW5ndGg7Zm9yKHZhciBzIGluIHQpIXImJiFOci5jYWxsKHQscyl8fGEmJigibGVuZ3RoIj09c3x8byYmKCJvZmZzZXQiPT1zfHwicGFyZW50Ij09cyl8fGkmJigiYnVmZmVyIj09c3x8ImJ5dGVMZW5ndGgiPT1zfHwiYnl0ZU9mZnNldCI9PXMpfHxocihzLGYpKXx8Yy5wdXNoKHMpO3JldHVybiBjfSwkcj1PYmplY3QucHJvdG90eXBlO3ZhciBScj1mdW5jdGlvbih0KXt2YXIgcj10JiZ0LmNvbnN0cnVjdG9yO3JldHVybiB0PT09KCJmdW5jdGlvbiI9PXR5cGVvZiByJiZyLnByb3RvdHlwZXx8JHIpfTt2YXIgRHI9ZnVuY3Rpb24odCxyKXtyZXR1cm4gZnVuY3Rpb24obil7cmV0dXJuIHQocihuKSl9fShPYmplY3Qua2V5cyxPYmplY3QpLEhyPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7dmFyIEdyPWZ1bmN0aW9uKHQpe2lmKCFScih0KSlyZXR1cm4gRHIodCk7dmFyIHI9W107Zm9yKHZhciBuIGluIE9iamVjdCh0KSlIci5jYWxsKHQsbikmJiJjb25zdHJ1Y3RvciIhPW4mJnIucHVzaChuKTtyZXR1cm4gcn07dmFyIFZyPWZ1bmN0aW9uKHQpe3JldHVybiBwcih0KT9Xcih0KTpHcih0KX07dmFyIHFyPWZ1bmN0aW9uKHQscil7cmV0dXJuIGZ1bmN0aW9uKG4sZSl7aWYobnVsbD09bilyZXR1cm4gbjtpZighcHIobikpcmV0dXJuIHQobixlKTtmb3IodmFyIG89bi5sZW5ndGgsaT1yP286LTEsdT1PYmplY3Qobik7KHI/aS0tOisraTxvKSYmITEhPT1lKHVbaV0saSx1KTspO3JldHVybiBufX0oKGZ1bmN0aW9uKHQscil7cmV0dXJuIHQmJkFyKHQscixWcil9KSk7dmFyIEpyPWZ1bmN0aW9uKHQpe3JldHVybiB0fTt2YXIgS3I9ZnVuY3Rpb24odCl7cmV0dXJuImZ1bmN0aW9uIj09dHlwZW9mIHQ/dDpKcn07dmFyIFFyPWZ1bmN0aW9uKHQscil7cmV0dXJuKHUodCk/anI6cXIpKHQsS3IocikpfTtmdW5jdGlvbiBYcih0KXtyZXR1cm4iW29iamVjdCBVaW50OEFycmF5XSI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodCl9ZnVuY3Rpb24gWXIodCl7cmV0dXJuIltvYmplY3QgVWludDE2QXJyYXldIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KX1mdW5jdGlvbiBacih0KXtyZXR1cm4hIXRyKHQpJiZvcih0KT49MH1mdW5jdGlvbiB0bih0LHIpe3JldHVybiBYdCh0KSYmWnIocik/MD09PShyPW9yKHIpKT8iIjp0LnN1YnN0cmluZygwLHIpOiIifWZ1bmN0aW9uIHJuKHQscil7cmV0dXJuIFh0KHQpJiZacihyKT8wPT09KHI9b3IocikpP3Q6ZnVuY3Rpb24odCxyKXtpZighWHQodCkpcmV0dXJuIiI7aWYoIVpyKHIpKXJldHVybiIiO2lmKDA9PT0ocj1vcihyKSkpcmV0dXJuIiI7dmFyIG49dC5sZW5ndGgtcjtyZXR1cm4gbjwwJiYobj0wKSx0LnN1YnN0cihuLHIpfSh0LHQubGVuZ3RoLXIpOiIifXZhciBubj1mKE9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLGRlZmF1bHQ6e319KSksZW49cygoZnVuY3Rpb24odCxyKXt2YXIgbjt0LmV4cG9ydHM9KG49bnx8ZnVuY3Rpb24odCxyKXt2YXIgbjtpZigidW5kZWZpbmVkIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93LmNyeXB0byYmKG49d2luZG93LmNyeXB0byksInVuZGVmaW5lZCIhPXR5cGVvZiBzZWxmJiZzZWxmLmNyeXB0byYmKG49c2VsZi5jcnlwdG8pLCJ1bmRlZmluZWQiIT10eXBlb2YgZ2xvYmFsVGhpcyYmZ2xvYmFsVGhpcy5jcnlwdG8mJihuPWdsb2JhbFRoaXMuY3J5cHRvKSwhbiYmInVuZGVmaW5lZCIhPXR5cGVvZiB3aW5kb3cmJndpbmRvdy5tc0NyeXB0byYmKG49d2luZG93Lm1zQ3J5cHRvKSwhbiYmdm9pZCAwIT09YyYmYy5jcnlwdG8mJihuPWMuY3J5cHRvKSwhbil0cnl7bj1ubn1jYXRjaCh0KXt9dmFyIGU9ZnVuY3Rpb24oKXtpZihuKXtpZigiZnVuY3Rpb24iPT10eXBlb2Ygbi5nZXRSYW5kb21WYWx1ZXMpdHJ5e3JldHVybiBuLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDMyQXJyYXkoMSkpWzBdfWNhdGNoKHQpe31pZigiZnVuY3Rpb24iPT10eXBlb2Ygbi5yYW5kb21CeXRlcyl0cnl7cmV0dXJuIG4ucmFuZG9tQnl0ZXMoNCkucmVhZEludDMyTEUoKX1jYXRjaCh0KXt9fXRocm93IG5ldyBFcnJvcigiTmF0aXZlIGNyeXB0byBtb2R1bGUgY291bGQgbm90IGJlIHVzZWQgdG8gZ2V0IHNlY3VyZSByYW5kb20gbnVtYmVyLiIpfSxvPU9iamVjdC5jcmVhdGV8fGZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe31yZXR1cm4gZnVuY3Rpb24ocil7dmFyIG47cmV0dXJuIHQucHJvdG90eXBlPXIsbj1uZXcgdCx0LnByb3RvdHlwZT1udWxsLG59fSgpLGk9e30sdT1pLmxpYj17fSxhPXUuQmFzZT17ZXh0ZW5kOmZ1bmN0aW9uKHQpe3ZhciByPW8odGhpcyk7cmV0dXJuIHQmJnIubWl4SW4odCksci5oYXNPd25Qcm9wZXJ0eSgiaW5pdCIpJiZ0aGlzLmluaXQhPT1yLmluaXR8fChyLmluaXQ9ZnVuY3Rpb24oKXtyLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pLHIuaW5pdC5wcm90b3R5cGU9cixyLiRzdXBlcj10aGlzLHJ9LGNyZWF0ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMuZXh0ZW5kKCk7cmV0dXJuIHQuaW5pdC5hcHBseSh0LGFyZ3VtZW50cyksdH0saW5pdDpmdW5jdGlvbigpe30sbWl4SW46ZnVuY3Rpb24odCl7Zm9yKHZhciByIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShyKSYmKHRoaXNbcl09dFtyXSk7dC5oYXNPd25Qcm9wZXJ0eSgidG9TdHJpbmciKSYmKHRoaXMudG9TdHJpbmc9dC50b1N0cmluZyl9LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaW5pdC5wcm90b3R5cGUuZXh0ZW5kKHRoaXMpfX0sZj11LldvcmRBcnJheT1hLmV4dGVuZCh7aW5pdDpmdW5jdGlvbih0LG4pe3Q9dGhpcy53b3Jkcz10fHxbXSx0aGlzLnNpZ0J5dGVzPW4hPXI/bjo0KnQubGVuZ3RofSx0b1N0cmluZzpmdW5jdGlvbih0KXtyZXR1cm4odHx8bCkuc3RyaW5naWZ5KHRoaXMpfSxjb25jYXQ6ZnVuY3Rpb24odCl7dmFyIHI9dGhpcy53b3JkcyxuPXQud29yZHMsZT10aGlzLnNpZ0J5dGVzLG89dC5zaWdCeXRlcztpZih0aGlzLmNsYW1wKCksZSU0KWZvcih2YXIgaT0wO2k8bztpKyspe3ZhciB1PW5baT4+PjJdPj4+MjQtaSU0KjgmMjU1O3JbZStpPj4+Ml18PXU8PDI0LShlK2kpJTQqOH1lbHNlIGZvcih2YXIgYT0wO2E8bzthKz00KXJbZSthPj4+Ml09blthPj4+Ml07cmV0dXJuIHRoaXMuc2lnQnl0ZXMrPW8sdGhpc30sY2xhbXA6ZnVuY3Rpb24oKXt2YXIgcj10aGlzLndvcmRzLG49dGhpcy5zaWdCeXRlcztyW24+Pj4yXSY9NDI5NDk2NzI5NTw8MzItbiU0Kjgsci5sZW5ndGg9dC5jZWlsKG4vNCl9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIHQ9YS5jbG9uZS5jYWxsKHRoaXMpO3JldHVybiB0LndvcmRzPXRoaXMud29yZHMuc2xpY2UoMCksdH0scmFuZG9tOmZ1bmN0aW9uKHQpe2Zvcih2YXIgcj1bXSxuPTA7bjx0O24rPTQpci5wdXNoKGUoKSk7cmV0dXJuIG5ldyBmLmluaXQocix0KX19KSxzPWkuZW5jPXt9LGw9cy5IZXg9e3N0cmluZ2lmeTpmdW5jdGlvbih0KXtmb3IodmFyIHI9dC53b3JkcyxuPXQuc2lnQnl0ZXMsZT1bXSxvPTA7bzxuO28rKyl7dmFyIGk9cltvPj4+Ml0+Pj4yNC1vJTQqOCYyNTU7ZS5wdXNoKChpPj4+NCkudG9TdHJpbmcoMTYpKSxlLnB1c2goKDE1JmkpLnRvU3RyaW5nKDE2KSl9cmV0dXJuIGUuam9pbigiIil9LHBhcnNlOmZ1bmN0aW9uKHQpe2Zvcih2YXIgcj10Lmxlbmd0aCxuPVtdLGU9MDtlPHI7ZSs9MiluW2U+Pj4zXXw9cGFyc2VJbnQodC5zdWJzdHIoZSwyKSwxNik8PDI0LWUlOCo0O3JldHVybiBuZXcgZi5pbml0KG4sci8yKX19LHY9cy5MYXRpbjE9e3N0cmluZ2lmeTpmdW5jdGlvbih0KXtmb3IodmFyIHI9dC53b3JkcyxuPXQuc2lnQnl0ZXMsZT1bXSxvPTA7bzxuO28rKyl7dmFyIGk9cltvPj4+Ml0+Pj4yNC1vJTQqOCYyNTU7ZS5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoaSkpfXJldHVybiBlLmpvaW4oIiIpfSxwYXJzZTpmdW5jdGlvbih0KXtmb3IodmFyIHI9dC5sZW5ndGgsbj1bXSxlPTA7ZTxyO2UrKyluW2U+Pj4yXXw9KDI1NSZ0LmNoYXJDb2RlQXQoZSkpPDwyNC1lJTQqODtyZXR1cm4gbmV3IGYuaW5pdChuLHIpfX0scD1zLlV0Zjg9e3N0cmluZ2lmeTpmdW5jdGlvbih0KXt0cnl7cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUodi5zdHJpbmdpZnkodCkpKX1jYXRjaCh0KXt0aHJvdyBuZXcgRXJyb3IoIk1hbGZvcm1lZCBVVEYtOCBkYXRhIil9fSxwYXJzZTpmdW5jdGlvbih0KXtyZXR1cm4gdi5wYXJzZSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQodCkpKX19LHk9dS5CdWZmZXJlZEJsb2NrQWxnb3JpdGhtPWEuZXh0ZW5kKHtyZXNldDpmdW5jdGlvbigpe3RoaXMuX2RhdGE9bmV3IGYuaW5pdCx0aGlzLl9uRGF0YUJ5dGVzPTB9LF9hcHBlbmQ6ZnVuY3Rpb24odCl7InN0cmluZyI9PXR5cGVvZiB0JiYodD1wLnBhcnNlKHQpKSx0aGlzLl9kYXRhLmNvbmNhdCh0KSx0aGlzLl9uRGF0YUJ5dGVzKz10LnNpZ0J5dGVzfSxfcHJvY2VzczpmdW5jdGlvbihyKXt2YXIgbixlPXRoaXMuX2RhdGEsbz1lLndvcmRzLGk9ZS5zaWdCeXRlcyx1PXRoaXMuYmxvY2tTaXplLGE9aS8oNCp1KSxjPShhPXI/dC5jZWlsKGEpOnQubWF4KCgwfGEpLXRoaXMuX21pbkJ1ZmZlclNpemUsMCkpKnUscz10Lm1pbig0KmMsaSk7aWYoYyl7Zm9yKHZhciBsPTA7bDxjO2wrPXUpdGhpcy5fZG9Qcm9jZXNzQmxvY2sobyxsKTtuPW8uc3BsaWNlKDAsYyksZS5zaWdCeXRlcy09c31yZXR1cm4gbmV3IGYuaW5pdChuLHMpfSxjbG9uZTpmdW5jdGlvbigpe3ZhciB0PWEuY2xvbmUuY2FsbCh0aGlzKTtyZXR1cm4gdC5fZGF0YT10aGlzLl9kYXRhLmNsb25lKCksdH0sX21pbkJ1ZmZlclNpemU6MH0pO3UuSGFzaGVyPXkuZXh0ZW5kKHtjZmc6YS5leHRlbmQoKSxpbml0OmZ1bmN0aW9uKHQpe3RoaXMuY2ZnPXRoaXMuY2ZnLmV4dGVuZCh0KSx0aGlzLnJlc2V0KCl9LHJlc2V0OmZ1bmN0aW9uKCl7eS5yZXNldC5jYWxsKHRoaXMpLHRoaXMuX2RvUmVzZXQoKX0sdXBkYXRlOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl9hcHBlbmQodCksdGhpcy5fcHJvY2VzcygpLHRoaXN9LGZpbmFsaXplOmZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0aGlzLl9hcHBlbmQodCksdGhpcy5fZG9GaW5hbGl6ZSgpfSxibG9ja1NpemU6MTYsX2NyZWF0ZUhlbHBlcjpmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24ocixuKXtyZXR1cm4gbmV3IHQuaW5pdChuKS5maW5hbGl6ZShyKX19LF9jcmVhdGVIbWFjSGVscGVyOmZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihyLG4pe3JldHVybiBuZXcgaC5ITUFDLmluaXQodCxuKS5maW5hbGl6ZShyKX19fSk7dmFyIGg9aS5hbGdvPXt9O3JldHVybiBpfShNYXRoKSxuKX0pKSxvbj1zKChmdW5jdGlvbih0LHIpe3ZhciBuO3QuZXhwb3J0cz0obj1lbixmdW5jdGlvbigpe3ZhciB0PW4scj10LmxpYi5Xb3JkQXJyYXk7ZnVuY3Rpb24gZSh0LG4sZSl7Zm9yKHZhciBvPVtdLGk9MCx1PTA7dTxuO3UrKylpZih1JTQpe3ZhciBhPWVbdC5jaGFyQ29kZUF0KHUtMSldPDx1JTQqMnxlW3QuY2hhckNvZGVBdCh1KV0+Pj42LXUlNCoyO29baT4+PjJdfD1hPDwyNC1pJTQqOCxpKyt9cmV0dXJuIHIuY3JlYXRlKG8saSl9dC5lbmMuQmFzZTY0PXtzdHJpbmdpZnk6ZnVuY3Rpb24odCl7dmFyIHI9dC53b3JkcyxuPXQuc2lnQnl0ZXMsZT10aGlzLl9tYXA7dC5jbGFtcCgpO2Zvcih2YXIgbz1bXSxpPTA7aTxuO2krPTMpZm9yKHZhciB1PShyW2k+Pj4yXT4+PjI0LWklNCo4JjI1NSk8PDE2fChyW2krMT4+PjJdPj4+MjQtKGkrMSklNCo4JjI1NSk8PDh8cltpKzI+Pj4yXT4+PjI0LShpKzIpJTQqOCYyNTUsYT0wO2E8NCYmaSsuNzUqYTxuO2ErKylvLnB1c2goZS5jaGFyQXQodT4+PjYqKDMtYSkmNjMpKTt2YXIgYz1lLmNoYXJBdCg2NCk7aWYoYylmb3IoO28ubGVuZ3RoJTQ7KW8ucHVzaChjKTtyZXR1cm4gby5qb2luKCIiKX0scGFyc2U6ZnVuY3Rpb24odCl7dmFyIHI9dC5sZW5ndGgsbj10aGlzLl9tYXAsbz10aGlzLl9yZXZlcnNlTWFwO2lmKCFvKXtvPXRoaXMuX3JldmVyc2VNYXA9W107Zm9yKHZhciBpPTA7aTxuLmxlbmd0aDtpKyspb1tuLmNoYXJDb2RlQXQoaSldPWl9dmFyIHU9bi5jaGFyQXQoNjQpO2lmKHUpe3ZhciBhPXQuaW5kZXhPZih1KTstMSE9PWEmJihyPWEpfXJldHVybiBlKHQscixvKX0sX21hcDoiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz0ifX0oKSxuLmVuYy5CYXNlNjQpfSkpLHVuPXMoKGZ1bmN0aW9uKHQscil7dmFyIG47dC5leHBvcnRzPShuPWVuLGZ1bmN0aW9uKCl7aWYoImZ1bmN0aW9uIj09dHlwZW9mIEFycmF5QnVmZmVyKXt2YXIgdD1uLmxpYi5Xb3JkQXJyYXkscj10LmluaXQsZT10LmluaXQ9ZnVuY3Rpb24odCl7aWYodCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyJiYodD1uZXcgVWludDhBcnJheSh0KSksKHQgaW5zdGFuY2VvZiBJbnQ4QXJyYXl8fCJ1bmRlZmluZWQiIT10eXBlb2YgVWludDhDbGFtcGVkQXJyYXkmJnQgaW5zdGFuY2VvZiBVaW50OENsYW1wZWRBcnJheXx8dCBpbnN0YW5jZW9mIEludDE2QXJyYXl8fHQgaW5zdGFuY2VvZiBVaW50MTZBcnJheXx8dCBpbnN0YW5jZW9mIEludDMyQXJyYXl8fHQgaW5zdGFuY2VvZiBVaW50MzJBcnJheXx8dCBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheXx8dCBpbnN0YW5jZW9mIEZsb2F0NjRBcnJheSkmJih0PW5ldyBVaW50OEFycmF5KHQuYnVmZmVyLHQuYnl0ZU9mZnNldCx0LmJ5dGVMZW5ndGgpKSx0IGluc3RhbmNlb2YgVWludDhBcnJheSl7Zm9yKHZhciBuPXQuYnl0ZUxlbmd0aCxlPVtdLG89MDtvPG47bysrKWVbbz4+PjJdfD10W29dPDwyNC1vJTQqODtyLmNhbGwodGhpcyxlLG4pfWVsc2Ugci5hcHBseSh0aGlzLGFyZ3VtZW50cyl9O2UucHJvdG90eXBlPXR9fSgpLG4ubGliLldvcmRBcnJheSl9KSk7ZnVuY3Rpb24gYW4odCl7cmV0dXJuIFhyKHQpP3VuLmNyZWF0ZSh0KS50b1N0cmluZyhvbik6IiJ9ZnVuY3Rpb24gY24odCl7aWYoIVF0KHQpKXJldHVybiBuZXcgVWludDhBcnJheTtmb3IodmFyIHI9b24ucGFyc2UodCksbj1yLndvcmRzLGU9ci5zaWdCeXRlcyxvPW5ldyBVaW50OEFycmF5KGUpLGk9MDtpPGU7aSsrKXt2YXIgdT1uW2k+Pj4yXT4+PjI0LWklNCo4JjI1NTtvW2ldPXV9cmV0dXJuIG99ZnVuY3Rpb24gZm4odCl7cmV0dXJuIFlyKHQpP2FuKGZ1bmN0aW9uKHQpe3JldHVybiBZcih0KT9uZXcgVWludDhBcnJheSh0KTpuZXcgVWludDhBcnJheX0odCkpOiIifWZ1bmN0aW9uIHNuKHQpe2lmKCFRdCh0KSlyZXR1cm4gbmV3IFVpbnQxNkFycmF5O3ZhciByPWZ1bmN0aW9uKHQpe3JldHVybiBYcih0KT9uZXcgVWludDE2QXJyYXkodCk6bmV3IFVpbnQxNkFycmF5fShjbih0KSk7cmV0dXJuIHJ9dmFyIGxuPSJbVWludDhBcnJheV06OiI7dmFyIHZuPSJbVWludDE2QXJyYXldOjoiO3ZhciBwbj17dGFnVThBOmxuLHU4YXJyMmI2NDpmdW5jdGlvbih0KXtyZXR1cm4gWHIodCk/bG4rYW4odCk6dH0sYjY0MnU4YXJyOmZ1bmN0aW9uKHQpe3JldHVybiBRdCh0KSYmdG4odCxsbi5sZW5ndGgpPT09bG4/Y24odD1ybih0LGxuLmxlbmd0aCkpOnR9LHRhZ1UxNkE6dm4sdTE2YXJyMmI2NDpmdW5jdGlvbih0KXtyZXR1cm4gWXIodCk/dm4rZm4odCk6dH0sYjY0MnUxNmFycjpmdW5jdGlvbih0KXtyZXR1cm4gUXQodCkmJnRuKHQsdm4ubGVuZ3RoKT09PXZuP3NuKHQ9cm4odCx2bi5sZW5ndGgpKTp0fX07ZnVuY3Rpb24geW4odCl7cmV0dXJuIltvYmplY3QgVW5kZWZpbmVkXSI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodCl9ZnVuY3Rpb24gaG4odCl7cmV0dXJuIltvYmplY3QgQXJyYXldIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KX1mdW5jdGlvbiBkbih0LHIsbixlLG8pe3ZhciBpPWZ1bmN0aW9uKHQpe3ZhciByPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXToiVWludDhBcnJheSI7aWYoeW4odCkpcmV0dXJuIiI7aWYoUXQocikpcj1bcl07ZWxzZSBpZighaG4ocikpcmV0dXJuIiI7ZnVuY3Rpb24gbih0LG4pe3JldHVybiByLmluZGV4T2YoIlVpbnQ4QXJyYXkiKT49MCYmKG49cG4udThhcnIyYjY0KG4pKSxyLmluZGV4T2YoIlVpbnQxNkFycmF5Iik+PTAmJihuPXBuLnUxNmFycjJiNjQobikpLG59dmFyIGU9IiI7dHJ5e2U9SlNPTi5zdHJpbmdpZnkodCxuKX1jYXRjaCh0KXtlPSIifXJldHVybiBlfShuKSx1PV9yKGksciksYT1jcigpLGM9dS5sZW5ndGg7UXIodSwoZnVuY3Rpb24ocixuKXtyPW1yKHIsIiIpO3ZhciBpPSIiLmNvbmNhdChhLCJ8IikuY29uY2F0KG4sInwiKS5jb25jYXQoYywifCIpLmNvbmNhdChyKTt0LnNlbmQoaSwoZnVuY3Rpb24odCl7dCYmRShvKSYmbyh0KX0pKSxFKGUpJiZlKChuKzEpL2MqMTAwKX0pKX12YXIgZ249ZnVuY3Rpb24odCxyLG4pe3ZhciBlPXQubGVuZ3RoO3JldHVybiBuPXZvaWQgMD09PW4/ZTpuLCFyJiZuPj1lP3Q6bHIodCxyLG4pfSxibj1SZWdFeHAoIltcXHUyMDBkXFx1ZDgwMC1cXHVkZmZmXFx1MDMwMC1cXHUwMzZmXFx1ZmUyMC1cXHVmZTJmXFx1MjBkMC1cXHUyMGZmXFx1ZmUwZVxcdWZlMGZdIik7dmFyIF9uPWZ1bmN0aW9uKHQpe3JldHVybiBibi50ZXN0KHQpfTt2YXIgd249ZnVuY3Rpb24odCl7cmV0dXJuIE8odCkmJiJbb2JqZWN0IFJlZ0V4cF0iPT1BKHQpfSxtbj1MciYmTHIuaXNSZWdFeHAsam49bW4/VHIobW4pOnduO3ZhciBBbj1mdW5jdGlvbih0KXtyZXR1cm4gdC5zcGxpdCgiIil9LE9uPSJcXHVkODAwLVxcdWRmZmYiLHhuPSJbIitPbisiXSIsU249IltcXHUwMzAwLVxcdTAzNmZcXHVmZTIwLVxcdWZlMmZcXHUyMGQwLVxcdTIwZmZdIixVbj0iXFx1ZDgzY1tcXHVkZmZiLVxcdWRmZmZdIixCbj0iW14iK09uKyJdIixrbj0iKD86XFx1ZDgzY1tcXHVkZGU2LVxcdWRkZmZdKXsyfSIsQ249IltcXHVkODAwLVxcdWRiZmZdW1xcdWRjMDAtXFx1ZGZmZl0iLEVuPSIoPzoiK1NuKyJ8IitVbisiKSIrIj8iLFBuPSJbXFx1ZmUwZVxcdWZlMGZdPyIsem49UG4rRW4rKCIoPzpcXHUyMDBkKD86IitbQm4sa24sQ25dLmpvaW4oInwiKSsiKSIrUG4rRW4rIikqIiksTW49Iig/OiIrW0JuK1NuKyI/IixTbixrbixDbix4bl0uam9pbigifCIpKyIpIixUbj1SZWdFeHAoVW4rIig/PSIrVW4rIil8IitNbit6biwiZyIpO3ZhciBMbj1mdW5jdGlvbih0KXtyZXR1cm4gdC5tYXRjaChUbil8fFtdfTt2YXIgSW49ZnVuY3Rpb24odCl7cmV0dXJuIF9uKHQpP0xuKHQpOkFuKHQpfTt2YXIgRm49ZnVuY3Rpb24odCxyLG4pe3JldHVybiBuJiYibnVtYmVyIiE9dHlwZW9mIG4mJmRyKHQscixuKSYmKHI9bj12b2lkIDApLChuPXZvaWQgMD09PW4/NDI5NDk2NzI5NTpuPj4+MCk/KHQ9RXQodCkpJiYoInN0cmluZyI9PXR5cGVvZiByfHxudWxsIT1yJiYham4ocikpJiYhKHI9Q3QocikpJiZfbih0KT9nbihJbih0KSwwLG4pOnQuc3BsaXQocixuKTpbXX07dmFyIE5uPWZ1bmN0aW9uKHQscixuKXt2YXIgZT1udWxsPT10PzA6dC5sZW5ndGg7cmV0dXJuIGU/KHI9bnx8dm9pZCAwPT09cj8xOkp0KHIpLGxyKHQscjwwPzA6cixlKSk6W119LFduPU1hdGguY2VpbCwkbj1NYXRoLm1heDt2YXIgUm49ZnVuY3Rpb24odCxyLG4sZSl7Zm9yKHZhciBvPS0xLGk9JG4oV24oKHItdCkvKG58fDEpKSwwKSx1PUFycmF5KGkpO2ktLTspdVtlP2k6KytvXT10LHQrPW47cmV0dXJuIHV9O3ZhciBEbj1mdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24ocixuLGUpe3JldHVybiBlJiYibnVtYmVyIiE9dHlwZW9mIGUmJmRyKHIsbixlKSYmKG49ZT12b2lkIDApLHI9cXQociksdm9pZCAwPT09bj8obj1yLHI9MCk6bj1xdChuKSxlPXZvaWQgMD09PWU/cjxuPzE6LTE6cXQoZSksUm4ocixuLGUsdCl9fSgpO2Z1bmN0aW9uIEhuKHQscil7cmV0dXJuIG49dCwiW29iamVjdCBPYmplY3RdIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuKSYmKCEoIVh0KHIpJiYhWXQocikpJiZyIGluIHQpO3ZhciBufXZhciBHbj17fTtmdW5jdGlvbiBWbih0LHIpe3ZhciBuPUZuKHQsInwiKSxlPW5bMF0sbz1HdChuWzFdKSxpPUd0KG5bMl0pLHU9bXIoTm4obiwzKSwifCIpO2lmKEhuKEduLGUpfHwoR25bZV09e30pLEduW2VdWyJfIitvXT11LG89PT1pLTEpe3ZhciBhPSIiO1FyKERuKGkpLChmdW5jdGlvbih0KXthKz1HbltlXVsiXyIrdF19KSksZGVsZXRlIEduW2VdO3ZhciBjPWZ1bmN0aW9uKHQpe3ZhciByPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXToiVWludDhBcnJheSI7aWYoUXQocikpcj1bcl07ZWxzZSBpZighaG4ocikpcmV0dXJue307ZnVuY3Rpb24gbih0LG4pe3JldHVybiByLmluZGV4T2YoIlVpbnQ4QXJyYXkiKT49MCYmKG49cG4uYjY0MnU4YXJyKG4pKSxyLmluZGV4T2YoIlVpbnQxNkFycmF5Iik+PTAmJihuPXBuLmI2NDJ1MTZhcnIobikpLG59dmFyIGU9e307dHJ5e2U9SlNPTi5wYXJzZSh0LG4pfWNhdGNoKHQpe2U9e319cmV0dXJuIGV9KGEpO3IoYyl9fXJldHVybiBmdW5jdGlvbih0KXt2YXIgcj0hMSxuPW51bGwsZT1uZXcgc3Isbz1uZXcgc3I7ZnVuY3Rpb24gdSh0KXtmb3IodmFyIHI9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheShyPjE/ci0xOjApLG89MTtvPHI7bysrKW5bby0xXT1hcmd1bWVudHNbb107c2V0VGltZW91dCgoZnVuY3Rpb24oKXtlLmVtaXQuYXBwbHkoZSxbdF0uY29uY2F0KG4pKX0pLDEpfWZ1bmN0aW9uIGEoKXt0LnVybHx8KHQudXJsPSJ3czovL2xvY2FsaG9zdDo4MDgwIiksdC50b2tlbnx8KHQudG9rZW49IioiKSx0LnN0clNwbGl0TGVuZ3RofHwodC5zdHJTcGxpdExlbmd0aD0xZTYpO3ZhciBhPXt1cmw6dC51cmwsdG9rZW46dC50b2tlbixvcGVuOmZ1bmN0aW9uKCl7dSgib3BlbiIpLHJ8fCh1KCJvcGVuT25jZSIpLHI9ITApfSxjbG9zZTpmdW5jdGlvbigpe3UoImNsb3NlIiksYygpfSxtZXNzYWdlOmZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0KXtWbih0LHMpfSh0KX0sZXJyb3I6ZnVuY3Rpb24odCl7Zih0KX19O3RyeXtuPW5ldyBpKGEpfWNhdGNoKHQpe3JldHVybiB1KCJlcnJvciIse21zZzoiY2FuIG5vdCBjcmVhdGUgd2Vic29ja2V0IixlcnI6dH0pLHZvaWQgYygpfWlmKFR0KG4sImVycm9yIikpcmV0dXJuIHUoImVycm9yIix7bXNnOiJjYW4gbm90IGNyZWF0ZSB3ZWJzb2NrZXQiLGVycjoiY2FuIG5vdCBuZXcgTWl4V1MgaW4gV1dlYnNvY2tldENsaWVudCJ9KSx2b2lkIGMoKTtmdW5jdGlvbiBmKHQpe3UoImVycm9yIix7bXNnOiJ3ZWJzb2NrZXQgZXJyb3IiLGVycjp0fSksbi5jbG9zZSgpfWZ1bmN0aW9uIHModCl7dmFyIHI9VHQodCwiX21vZGUiLCIiKTtpZigiZXhlY3V0ZSI9PT1yKWlmKFR0KHQsIl9pZCIpJiZUdCh0LCJvdXRwdXQiKSl7dmFyIG49VHQodCwiX2lkIiksZT1UdCh0LCJvdXRwdXQiKTtvLmVtaXQobixlKX1lbHNlIHUoImVycm9yIix7bXNnOiJjYW4gbm90IGZpbmQgX2lkIGFuZCBvdXRwdXQgaW4gZGF0YSIsZXJyOnR9KTtlbHNlImJyb2FkY2FzdCI9PT1yP3UoImJyb2FkY2FzdCIsVHQodCwiZGF0YSIpKToiZGVsaXZlciI9PT1yP3UoImRlbGl2ZXIiLFR0KHQsImRhdGEiKSk6Zih7bXNnOiJjYW4gbm90IGZpbmQgX21vZGUgaW4gZGF0YSIsZXJyOnR9KX1mdW5jdGlvbiBsKHIsZSl7bi5yZWFkeVN0YXRlPT09bi5PUEVOJiZkbihuLHQuc3RyU3BsaXRMZW5ndGgscixlLChmdW5jdGlvbih0KXt1KCJlcnJvciIse21zZzoiY2FuIG5vdCBzZW5kIG1lc3NhZ2UiLGVycjp0fSl9KSl9ZS5yZW1vdmVBbGxMaXN0ZW5lcnMoInRyaWdnZXJFeGVjdXRlIiksZS5vbigidHJpZ2dlckV4ZWN1dGUiLChmdW5jdGlvbih0KXt2YXIgcj1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06bnVsbCxuPWFyZ3VtZW50cy5sZW5ndGg+Mj9hcmd1bWVudHNbMl06dm9pZCAwLGU9YXJndW1lbnRzLmxlbmd0aD4zP2FyZ3VtZW50c1szXTp2b2lkIDAsaT1jcigpLHU9e19tb2RlOiJleGVjdXRlIixfaWQ6aSxmdW5jOnQsaW5wdXQ6cn07bCh1LGUpLG8ub24oaSwoZnVuY3Rpb24odCl7bih0KSxvLnJlbW92ZUFsbExpc3RlbmVycyhpKX0pKX0pKSxlLnJlbW92ZUFsbExpc3RlbmVycygidHJpZ2dlckJyb2FkY2FzdCIpLGUub24oInRyaWdnZXJCcm9hZGNhc3QiLChmdW5jdGlvbih0LHIpe2woe19tb2RlOiJicm9hZGNhc3QiLGRhdGE6dH0scil9KSksZS5yZW1vdmVBbGxMaXN0ZW5lcnMoInRyaWdnZXJEZWxpdmVyIiksZS5vbigidHJpZ2dlckRlbGl2ZXIiLChmdW5jdGlvbih0LHIpe2woe19tb2RlOiJkZWxpdmVyIixkYXRhOnR9LHIpfSkpfWZ1bmN0aW9uIGMoKXtzZXRUaW1lb3V0KChmdW5jdGlvbigpe3UoInJlY29ubiIpLGEoKX0pLDFlMyl9cmV0dXJuIGUuZXhlY3V0ZT1mdW5jdGlvbih0LHIpe3ZhciBuPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpmdW5jdGlvbigpe30sZT1MdCgpO3JldHVybiB1KCJ0cmlnZ2VyRXhlY3V0ZSIsdCxyLChmdW5jdGlvbih0KXtlLnJlc29sdmUodCl9KSxuKSxlfSxlLmJyb2FkY2FzdD1mdW5jdGlvbih0KXt2YXIgcj1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06ZnVuY3Rpb24oKXt9O3UoInRyaWdnZXJCcm9hZGNhc3QiLHQscil9LGUuZGVsaXZlcj1mdW5jdGlvbih0KXt2YXIgcj1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06ZnVuY3Rpb24oKXt9O3UoInRyaWdnZXJEZWxpdmVyIix0LHIpfSxhKCksZX19KCk7dmFyIHdvPW51bGwsYkluaXQ9ITE7ZnVuY3Rpb24gaW5pdChhKXtiSW5pdHx8KHdvPW5ldyBXQ29udmVyd3NDbGllbnQoYSksd28ub24oIm9wZW4iLGZ1bmN0aW9uKCl7c2VuZFN5c3RlbU1lc3NhZ2UoIm9wZW4iKX0pLHdvLm9uKCJvcGVuT25jZSIsZnVuY3Rpb24oKXtzZW5kU3lzdGVtTWVzc2FnZSgib3Blbk9uY2UiKSxiSW5pdD0hMH0pLHdvLm9uKCJjbG9zZSIsZnVuY3Rpb24oKXtzZW5kU3lzdGVtTWVzc2FnZSgiY2xvc2UiKX0pLHdvLm9uKCJlcnJvciIsZnVuY3Rpb24oYSl7c2VuZFN5c3RlbU1lc3NhZ2UoImVycm9yIixhKX0pLHdvLm9uKCJyZWNvbm4iLGZ1bmN0aW9uKCl7c2VuZFN5c3RlbU1lc3NhZ2UoInJlY29ubiIpfSksd28ub24oImJyb2FkY2FzdCIsZnVuY3Rpb24oYSl7c2VuZFN5c3RlbU1lc3NhZ2UoImJyb2FkY2FzdCIsYSl9KSx3by5vbigiZGVsaXZlciIsZnVuY3Rpb24oYSl7c2VuZFN5c3RlbU1lc3NhZ2UoImRlbGl2ZXIiLGEpfSkpfWZ1bmN0aW9uIHNlbmRNZXNzYWdlKGEpe3NlbGYucG9zdE1lc3NhZ2UoYSl9ZnVuY3Rpb24gc2VuZFN5c3RlbU1lc3NhZ2UoYSl7dmFyIGI9MTxhcmd1bWVudHMubGVuZ3RoJiZhcmd1bWVudHNbMV0hPT12b2lkIDA/YXJndW1lbnRzWzFdOm51bGw7c2VuZE1lc3NhZ2Uoe19pZDoic3lzdGVtIixmdW5jOmEsZGF0YTpifSl9c2VsZi5vbm1lc3NhZ2U9ZnVuY3Rpb24oYSl7dmFyIGI9YS5kYXRhLGM9Yi50eXBlO2lmKCJpbml0Ij09PWMpe3ZhciBkPWIuX2lkLGU9Yi5pbnB1dDtpbml0KGUpO3ZhciBrPXNldEludGVydmFsKGZ1bmN0aW9uKCl7aWYoYkluaXQpe3NlbmRNZXNzYWdlKHtfaWQ6ZCxvdXRwdXQ6bnVsbH0pLGNsZWFySW50ZXJ2YWwoayl9fSwxMCl9ZWxzZSBpZigiZXhlY3V0ZSI9PT1jKXt2YXIgZj1iLl9pZCxnPWIuZnVuYyxoPWIuaW5wdXQ7d28uZXhlY3V0ZShnLGgsZnVuY3Rpb24oYSl7c2VuZE1lc3NhZ2Uoe19pZDpmLHByb2c6YX0pfSkudGhlbihmdW5jdGlvbihhKXtzZW5kTWVzc2FnZSh7X2lkOmYsb3V0cHV0OmF9KX0pfWVsc2UgaWYoImJyb2FkY2FzdCI9PT1jfHwiZGVsaXZlciI9PT1jKXt2YXIgaT1iLl9pZCxqPWIuaW5wdXQ7d29bY10oaixmdW5jdGlvbihhKXtzZW5kTWVzc2FnZSh7X2lkOmkscHJvZzphfSl9KX1lbHNlIHNlbmRTeXN0ZW1NZXNzYWdlKCJlcnJvciIsInR5cGUgZXJyb3I6ICIuY29uY2F0KGMpKX07'

//code
//let code = b642u8arr(codeB64)
let code = b642str(codeB64)


function genWebWorker(code) {

    //URL
    let URL = window.URL || window.webkitURL

    //blob
    let blob
    try {
        //BlobBuilder for IE11, 依然有安全性問題
        let BlobBuilder = window.BlobBuilder ||
            window.WebKitBlobBuilder ||
            window.MozBlobBuilder ||
            window.MSBlobBuilder
        blob = new BlobBuilder()
        blob.append(code)
        blob = blob.getBlob()
        return new Worker(URL.createObjectURL(blob))
    }
    catch (e) {
        //console.log('can not use BlobBuilder', e)
    }

    try {
        //blob for Chrome 8+, Firefox 6+, Safari 6.0+, Opera 15+
        blob = new Blob([code])
        return new Worker(URL.createObjectURL(blob))
    }
    catch (e) {
        //console.log('can not use Blob', e)
    }

    try {
        //data:application/javascript for Opera 10.60 - 12
        return new Worker('data:application/javascript,' + encodeURIComponent(code))
    }
    catch (e) {
        //console.log('can not use application/javascript', e)
    }

    return null
}


/**
 * 於瀏覽器(Browser)通過Web Worker建立WebSocket使用者端物件
 *
 * @class
 * @param {Object} opt 輸入設定參數物件
 * @param {String} [opt.url='ws://localhost:8080'] 輸入WebSocket伺服器ws網址，預設為'ws://localhost:8080'
 * @param {String} [opt.token='*'] 輸入使用者認證用token，預設為'*'
 * @param {Integer} [opt.strSplitLength=1000000] 輸入傳輸封包長度整數，預設為1000000
 * @returns {Object} 回傳通訊物件，可監聽事件open、openOnce、close、error、reconn、broadcast、deliver，可使用函數execute、broadcast、deliver
 * @example
 *
 * <script src="dist/w-converws-client-webworker.umd.js"></script>
 *
 * let opt = {
 *     url: 'ws://localhost:8080',
 *     token: '*',
 * }
 *
 * //new
 * let WConverwsClient = window['w-converws-client-webworker']
 * let wo = new WConverwsClient(opt)
 *
 * wo.on('open', function() {
 *     console.log('client web: open')
 * })
 * wo.on('openOnce', function() {
 *     console.log('client web: openOnce')
 *
 *     //execute
 *     wo.execute('add', { p1: 1, p2: 2 },
 *         function (prog) {
 *             console.log('client web: execute prog=', prog)
 *         })
 *         .then(function(r) {
 *             console.log('client web: execute: add=', r)
 *         })
 *
 *     //broadcast
 *     wo.broadcast('client web broadcast hi', function (prog) {
 *         console.log('client web: broadcast prog=', prog)
 *     })
 *
 *     //deliver
 *     wo.deliver('client deliver hi', function (prog) {
 *         console.log('client web: deliver prog=', prog)
 *     })
 *
 * })
 * wo.on('close', function() {
 *     console.log('client web: close')
 * })
 * wo.on('error', function(err) {
 *     console.log('client web: error=', err)
 * })
 * wo.on('reconn', function() {
 *     console.log('client web: reconn')
 * })
 * wo.on('broadcast', function(data) {
 *     console.log('client web: broadcast=', data)
 * })
 * // wo.on('deliver', function(data) { //伺服器目前無法針對client直接deliver
 * //     console.log('client web: deliver=', data)
 * // })
 *
 */
function WConverwsClientWebworker(opt) {


    //ee
    let ee = new Evem()


    //wk
    // let blob = new Blob([code], { type: 'text/javascript' })
    // let url = URL.createObjectURL(blob)
    // let wk = new Worker(url)
    // let wk = new Worker('./wkapi/wscs_webworker.mjs')
    let wk = genWebWorker(code)


    //check, IE11安全性問題
    if (wk === null) {
        return null
    }


    function init(opt) {

        //_id
        let _id = genID()

        //msg
        let msg = {
            _id,
            type: 'init',
            input: opt,
        }

        //postMessage
        wk.postMessage(msg)

    }
    init(opt)


    function terminate() {
        wk.terminate()
        wk = undefined
    }


    function execute(func, input, callback) {

        //pm
        let pm = genPm()

        //_id
        let _id = genID()

        //msg
        let msg = {
            _id,
            type: 'execute',
            func,
            input,
        }

        //postMessage
        wk.postMessage(msg)

        //等待結果回傳
        ee.on(_id, function (data) {

            //prog
            if (data.prog) {

                if (isfun(callback)) {

                    //callback
                    callback(data.prog)

                }

            }
            //output
            else {

                //resolve
                pm.resolve(data.output)

                //removeAllListeners
                ee.removeAllListeners(_id)

            }

        })

        return pm
    }


    function core(type, input, callback) {

        //pm
        let pm = genPm()

        //_id
        let _id = genID()

        //msg
        let msg = {
            _id,
            type,
            input,
        }

        //postMessage
        wk.postMessage(msg)

        //等待結果回傳
        ee.on(_id, function (data) {

            //callback
            if (isfun(callback)) {
                callback(data.prog)
            }

            //finish
            if (data.prog === 100) {

                //resolve
                pm.resolve()

                //removeAllListeners
                ee.removeAllListeners(_id)

            }

        })

        return pm
    }


    function broadcast(input, callback) {
        return core('broadcast', input, callback)
    }


    function deliver(input, callback) {
        return core('deliver', input, callback)
    }


    wk.onmessage = function (e) {

        //data
        let data = e.data

        //_id
        let _id = data._id

        if (_id !== 'system') {

            //emit
            ee.emit(_id, data)

        }
        else {

            //emit
            ee.emit(data.func, data.data)

        }

    }


    //save
    ee.execute = execute
    ee.broadcast = broadcast
    ee.deliver = deliver
    ee.terminate = terminate


    return ee
}


export default WConverwsClientWebworker
